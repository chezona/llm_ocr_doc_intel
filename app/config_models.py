"""
Defines Pydantic models for OCR and LLM configuration settings.
These models provide a structured way to manage parameters for 
the OCR and LLM processing steps.
"""
from pydantic import BaseModel, Field
from typing import Optional

class OCRConfig(BaseModel):
    """
    Configuration settings for Optical Character Recognition (OCR) processing.
    This model defines parameters like page limits and formatting options
    to control how documents are processed by the OCR engine.
    """
    max_pages: int = Field(0, description="Maximum number of pages to process (0 for all)")
    skip_first_n_pages: int = Field(0, description="Number of pages to skip from the beginning")
    reformat_as_markdown: bool = Field(True, description="Convert output to markdown format")
    suppress_headers_and_page_numbers: bool = Field(True, description="Remove headers and page numbers")
    
class LLMConfig(BaseModel):
    """
    Configuration settings for Large Language Model (LLM) processing.
    This model defines parameters such as model name, temperature, and token limits
    to control how text is processed or generated by the LLM.
    """
    model_name: str = Field("gemma:7b", description="Model name to use for text enhancement")
    temperature: float = Field(0.7, description="Temperature for generation")
    max_tokens: int = Field(2048, description="Maximum tokens to generate")
    token_buffer: int = Field(500, description="Buffer to account for token estimation inaccuracies")
    token_cushion: int = Field(300, description="Don't use the full max tokens to avoid hitting the limit")
    
    # Fields primarily for LLMTextEnhancer or similar text processing tasks
    chunk_size: Optional[int] = Field(None, description="Character chunk size for processing large texts with LLMs.")
    chunk_overlap: Optional[int] = Field(None, description="Character overlap between chunks for text processing.")
    quality_assessment_sample_chars: Optional[int] = Field(None, description="Number of characters for quality assessment samples.")

    # We could add other common parameters like top_p, top_k, etc. if needed
    # base_url: Optional[str] = Field(None, description="Base URL for the LLM API, if not globally configured.")
    # api_key: Optional[str] = Field(None, description="API key for the LLM service, if required.") 